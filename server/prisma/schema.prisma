// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  firstName           String
  lastName            String
  auth                Authentication
  address             String
  phoneNum            String
  uniqueOrgCode       String
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt
  AppointmentBookings AppointmentBooking[]
  EmergencyBookings   EmergencyBooking[]
  EmergencyContact    EmergencyContact[]
}

type Authentication {
  password     String
  salt         String
  sessionToken String
}

type Feedback {
  description String
  rating      String
  createdAt   DateTime @default(now()) @map("created_at")
}

model AppointmentBooking {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  department     String
  location       String
  issueFacing    String
  bookingDate    String
  doctorAssigned String?
  feedback       Feedback
  cancelled      Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt
}

model EmergencyBooking {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @db.ObjectId
  department          String
  location            String
  issueFacing         String
  bookingDate         DateTime @default(now())
  approxTimeOfArrival String
  needAmbulance       Boolean? @default(true)
  doctorAssigned      String?
  cancelled           Boolean  @default(false)
  feedback            Feedback
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt
}

model EmergencyContact {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  name         String
  phoneNum     String
  email        String
  relationship String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt
}
